using Newtonsoft.Json;
using System.Data;
using System.Diagnostics;
using System.IO.Compression;
using System.Net;
using System.Text;
using AnyAscii;
using Npgsql;

namespace AI4SoilHealth.Services {
    /**
    * Helper library for various operations   
    @module Helper
    */

    public static class Helper {

        /**
            * Compresses a string
            * @param str: The string to compress
            * @return: The compressed string
            */
        public static byte[] Zip(string str) {
            var bytes = Encoding.UTF8.GetBytes(str);
            using var msi = new MemoryStream(bytes);
            using var mso = new MemoryStream();
            using var gs = new GZipStream(mso, CompressionMode.Compress);
            msi.CopyTo(gs);

            return mso.ToArray();
        }

        /**
            * Decompresses a byte array
            * @param bytes: The byte array to decompress
            * @return: The decompressed string
            */
        public static string Unzip(byte[] bytes) {
            using var msi = new MemoryStream(bytes);
            using var mso = new MemoryStream();
            using var gs = new GZipStream(msi, CompressionMode.Decompress);
            gs.CopyTo(mso);

            return Encoding.UTF8.GetString(mso.ToArray());
        }

        /**
            * Checks if a string contains an error
            * @param s: The string to check
            * @return: True if the string contains an error, false otherwise
            */
        public static bool IsError(string s) {
            return s.Contains("\"error\":");
        }

        /**
            * Creates a message
            * @param milisec: The time in milliseconds
            * @return: The message
            */
        public static string CreateMessage(long milisec) {
            return JsonConvert.SerializeObject(new { message = $"Akcija uspješno obavljena u {milisec} ms" });
        }

        /**
        * Creates a message
        * @param text: The text
        * @return: The message
        */

        public static string CreateMessage(string text) {
            if (IsError(text)) return text;
            return JsonConvert.SerializeObject(new { message = text.Replace("\"", "") });
        }

        /**
        * Creates an error message
        * @param logger: The logger
        * @param message: The message
        * @param errToLog: The error to log
        * @return: The error message
        */
        public static string CreateError(ILogger logger, string message, Exception errToLog = null) {
            
            if (logger != null) logger.LogError(errToLog, message);
            return JsonConvert.SerializeObject(new { error = message });
        }

        /**
        * Handles an exception
        * @param logger: The logger
        * @param ex: The exception
        * @param errExtension: The error extension
        * @return: The error message
        */
        public static string HandleException(ILogger logger, Exception ex, string errExtension = "") {
            string msg = ex.Message;
            bool doLog = true;
            if (ex is NpgsqlException sqlEx) {
                //if (sqlEx.Class == 18 || sqlEx.State == 255) {  // proprietary FER error
                //    msg += " " + errExtension;
                //    doLog = false;
                //} else {
                //    if (sqlEx.Number == 547) {
                //        var match = Regex.Match(sqlEx.Message, "CHECK constraint \"([^\"]+)\"");
                //        if (match.Success) {
                //            msg = $"Nije uspjelo spremanje zbog provjere {match.Groups[1]?.Value}.";
                //        } else {
                //            match = Regex.Match(sqlEx.Message, "table \"([^\"]+)\"");
                //            msg = $"Ovom akcijom bio bi narušen referencijalni integritet zbog veze s tablicom {match.Groups[1]?.Value}.";//"Nije moguće obrisati zapis na koji se povezuju drugi zapisi";
                //        }
                //        doLog = false;
                //    } else if (sqlEx.Number == 2601) {
                //        msg = "Već postoji zapis s istim ključem";
                //        doLog = false;
                //    }
                //}
            }
            if (doLog) {
                return CreateError(logger, ex.Message, ex);
            } else {
                return JsonConvert.SerializeObject(new { error = msg });
            }
        }

        /**
        * Serializes reader that returns SELECT ... FOR JSON
        * @param reader: The reader
        * @return: The serialized JSON
        */
        public static string SerializeJsonReader(IDataReader reader) {
            StringBuilder s = new StringBuilder();
            while (reader.Read()) {
                var ret = reader[0].ToString();
                s.Append(ret);
            }
            return s.ToString();
        }

        /**
        * Serializes reader that returns one or more recordsets with SELECT ...       
        * @param reader: The reader
        * @param multiple: True if multiple recordsets are expected
        * @param camelCase: True if attributes should be converted to camelCase
        * @return: The serialized JSON
        */
        public static string SerializeReader(IDataReader reader, bool multiple = false, bool camelCase = false, HashSet<string> keys = null, string keyExpr = null, string[] tableNames = null, bool excelReader = false) {
            var stream = new StringWriter();
            using var writer = new JsonTextWriter(stream);
            int n = 1; bool firstRecord; string name;
            if (multiple) writer.WriteStartObject();
            do {
                if (multiple) {
                    if (tableNames != null) {
                        writer.WritePropertyName($"{tableNames[n - 1]}");
                    } else {
                        writer.WritePropertyName($"Table{n}");
                    }
                    n++;
                }
                writer.WriteStartArray();
                firstRecord = true;
                List<string> names = new List<string>();
                while (reader.Read()) {
                    if (!excelReader || !firstRecord) writer.WriteStartObject();
                    for (int i = 0; i < reader.FieldCount; i++) {
                        if (firstRecord) { // collect names when on first record
                            if (excelReader) {
                                name = reader.GetValue(i).ToString();
                                name = name.Replace(" ", "").Transliterate();
                            } else {
                                name = reader.GetName(i);
                            }

                            //name = name.Transliterate();
                            if (camelCase) name = Char.ToLowerInvariant(name[0]) + name.Substring(1);
                            names.Add(name);
                        }
                        if (keys != null) {
                            if (names[i] == keyExpr) {
                                keys.Add(reader.GetValue(i).ToString());
                            }
                        }
                        if (excelReader && firstRecord) continue;
                        writer.WritePropertyName(names[i]);
                        if (!reader.IsDBNull(i)) {
                            writer.WriteValue(reader.GetValue(i));
                        } else {
                            writer.WriteNull();
                        }

                    }
                    if (!excelReader || !firstRecord) writer.WriteEndObject();
                    firstRecord = false;
                }
                writer.WriteEndArray();
            } while (reader.NextResult());
            if (multiple) writer.WriteEndObject();
            return stream.ToString();
        }

        /**
        * Serializes an attribute
        * @param writer: The writer
        * @param name: The name
        * @param type: The type
        */
        public static void WriteAttribute(JsonWriter writer, string name, string type) {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteValue(name);
            writer.WritePropertyName("type");
            writer.WriteValue(type);
            writer.WriteEndObject();
        }

        /**
        * Serializes reader that returns a recordset int the frugal format
        * @param reader: The reader
        * @return: The serialized JSON
        */
        public static string SerializeReaderFrugal(IDataReader reader) {
            StringWriter stringWriter = new StringWriter();
            JsonWriter jsonWriter = new JsonTextWriter(stringWriter);
            jsonWriter.WriteStartObject();
            
            jsonWriter.WritePropertyName("attributes");
            jsonWriter.WriteStartArray();
            for (int i = 0; i < reader.FieldCount; i++) {
                WriteAttribute(jsonWriter, reader.GetName(i), reader.GetDataTypeName(i));
            }                  
            jsonWriter.WriteEndArray();

            jsonWriter.WritePropertyName("data");
            jsonWriter.WriteStartArray();
            while (reader.Read()) {
                jsonWriter.WriteStartArray();
                for (int i = 0; i < reader.FieldCount; i++) {
                    if (reader[i] is Array) {
                        jsonWriter.WriteStartArray();
                        foreach (var el in reader[i] as Array) {
                            jsonWriter.WriteValue(el);
                        }   
                        jsonWriter.WriteEndArray();
                    } else {
                        jsonWriter.WriteValue(reader[i]);
                    }
                }
                jsonWriter.WriteEndArray();
            }
            jsonWriter.WriteEndArray();

            jsonWriter.WriteEndObject();
            return stringWriter.ToString();
        }

        /**
        * Serializes a single record
        * @param reader: The reader
        * @param camelCase: True if attributes should be converted to camelCase
        * @param returnAttributesIfEmpty: True if attributes should be returned even if the record is empty
        * @return: The serialized JSON
        */
        public static string SerializeSingle(IDataReader reader, bool camelCase = false, bool returnAttributesIfEmpty = false) {
            var stream = new StringWriter();
            using var writer = new JsonTextWriter(stream);
            writer.WriteStartObject();
            if (reader.Read()) {
                for (int i = 0; i < reader.FieldCount; i++) {
                    string name = reader.GetName(i);
                    if (camelCase) name = Char.ToLowerInvariant(name[0]) + name.Substring(1);
                    writer.WritePropertyName(name);
                    if (!reader.IsDBNull(i)) {
                        writer.WriteValue(reader.GetValue(i));
                    } else {
                        writer.WriteNull();
                    }
                }
            } else if (returnAttributesIfEmpty) {
                for (int i = 0; i < reader.FieldCount; i++) {
                    string name = reader.GetName(i);
                    if (camelCase) name = Char.ToLowerInvariant(name[0]) + name.Substring(1);
                    writer.WritePropertyName(name);
                    writer.WriteNull();
                }
            }
            writer.WriteEndObject();
            return stream.ToString();
        }

        /**
        * Deserializes a grid level action (containing array of @rows)
        * @param values: The values
        * @param obj: The object
        * @param rows: The rows
        */
        public static void GetRows(string values, out Dictionary<string, object> obj, out List<Dictionary<string, object>> rows) {
            obj = JsonConvert.DeserializeObject<Dictionary<string, object>>(values);
            var s = JsonConvert.SerializeObject(obj["@rows"]);
            rows = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(s);
        }

        public static void SerializePivotRow(JsonWriter jsonWriter, object[] row, KeyValuePair<int, string>[] cols, Dictionary<string, object> rowSums, Dictionary<string, string> answers) {
            jsonWriter.WriteStartObject();
            for (int i = 0; i < cols.Length; i++) {
                jsonWriter.WritePropertyName(cols[i].Value);
                jsonWriter.WriteValue(row[cols[i].Key]);
            }
            SerializeRestOfPivotRow(jsonWriter, rowSums, answers);
            jsonWriter.WriteEndObject();
        }

        public static void SerializeRestOfPivotRow(JsonWriter writer, Dictionary<string, object> rowSums, Dictionary<string, string> answers) {
            foreach (var pair in rowSums) {
                writer.WritePropertyName(answers[pair.Key]);
                if (pair.Value == null) {
                    writer.WriteValue("");
                } else {
                    writer.WriteValue(pair.Value);
                }
            }
        }

        /** 
         * Prepares a dictionary of pivot columns
         * @param a: The reader
         * @param pivotColumnKey: Index of pivot column key
         * @param pivotColumnName: Index of pivot column name
         * @return: The dictionary
         */
        public static Dictionary<string, string> PreparePivotColumnsDictionary(IDataReader a, int pivotColumnKey, int pivotColumnName) {

            Dictionary<string, string> pivotColumnsDictionary = new Dictionary<string, string>();

            string key, value;
            while (a.Read()) {
                key = a.GetInt32(pivotColumnKey).ToString();
                value = a.GetString(pivotColumnName);
                pivotColumnsDictionary[key] = value;
            }
            a.Close();
            return pivotColumnsDictionary;
        }

        /** 
         * Prepares a dictionary of pivot columns, when there are more than one pivot key
         * @param a: The reader
         * @param pivotColumnsKeys: Index of pivot column key
         * @param pivotColumnsNames: Index of pivot column name
         * @return: The dictionary
        */
        public static Dictionary<string, string> PreparePivotColumnsDictionaryMultiKey(IDataReader a, int[] pivotColumnsKeys, int[] pivotColumnsNames) {

            Dictionary<string, string> pivotColumnsDictionary = new Dictionary<string, string>();

            string key, value;
            while (a.Read()) {
                key = a.GetInt32(pivotColumnsKeys[0]).ToString();
                for (int i = 1; i < pivotColumnsKeys.Length; i++) {
                    if (!a.IsDBNull(pivotColumnsKeys[i])) {
                        key += "/" + a.GetInt32(pivotColumnsKeys[i]).ToString();
                    }
                }
                value = a.GetString(pivotColumnsNames[0]);
                for (int i = 1; i < pivotColumnsNames.Length; i++) {
                    if (!a.IsDBNull(pivotColumnsNames[i])) {
                        value += "/" + a.GetString(pivotColumnsNames[i]);
                    }
                }
                pivotColumnsDictionary[key] = value;
            }
            a.Close();
            return pivotColumnsDictionary;
        }

        public static string Pivot(string aggregate, IDataReader r, Dictionary<string, string> pivotColumnsDictionary, int[] colIndices, int pivotColIndex, int pivotValueIndex) {

            Dictionary<string, object> sums = new Dictionary<string, object>();

            StringWriter stringWriter = new StringWriter();
            JsonWriter jsonWriter = new JsonTextWriter(stringWriter);

            jsonWriter.WriteStartArray();
            object[] prev = new object[r.FieldCount];

            KeyValuePair<int, string>[] cols = new KeyValuePair<int, string>[colIndices.Length];
            string key;
            bool first = true;
            while (r.Read()) {
                if (first) {
                    // first row, collect column names
                    for (int i = 0; i < cols.Length; i++) {
                        cols[i] = new KeyValuePair<int, string>(colIndices[i], r.GetName(colIndices[i]));
                    }
                    first = false;
                } else {
                    //did some of the columns change?
                    for (int i = 0; i < colIndices.Length; i++) {
                        if (!(r[colIndices[i]].Equals(prev[colIndices[i]]))) {
                            Helper.SerializePivotRow(jsonWriter, prev, cols, sums, pivotColumnsDictionary);
                            foreach (var rs in pivotColumnsDictionary) {
                                if (aggregate == "values") {
                                    sums[rs.Key] = "";
                                } else {
                                    sums[rs.Key] = 0;
                                }
                            }
                        }
                    }
                }   
                for (int i = 0; i < r.FieldCount; i++) {
                    prev[i] = r[i];
                }
                key = r.GetInt32(pivotColIndex).ToString();
                if (!r.IsDBNull(pivotValueIndex)) {
                    if (aggregate == "count") {
                        sums[key] = (int)sums[key] + 1;
                    } else if (aggregate == "sum") {
                        sums[key] = (int)sums[key] + r.GetInt32(pivotValueIndex);
                    } else {
                        sums[key] = r.GetString(pivotValueIndex);
                    }
                }
            }
            Helper.SerializePivotRow(jsonWriter, prev, cols, sums, pivotColumnsDictionary);
            jsonWriter.WriteEndArray();
            r.Close();

            return stringWriter.ToString();
        }

        //public static string PivotMulti(IDataReader r, Dictionary<string, string> pivotColumnsDictionary, int[] colIndices, int[] resultIndices, int pivotCol) {

        //    Dictionary<string, int> sums = new Dictionary<string, int>();

        //    StringWriter stringWriter = new StringWriter();
        //    JsonWriter jsonWriter = new JsonTextWriter(stringWriter);

        //    jsonWriter.WriteStartArray();
        //    object[] prev = new object[r.FieldCount];

        //    KeyValuePair<int, string>[] cols = new KeyValuePair<int, string>[colIndices.Length];
        //    string key;

        //    while (r.Read()) {
        //        if (prev[0] == null) {
        //            for (int i = 0; i < cols.Length; i++) {
        //                cols[i] = new KeyValuePair<int, string>(colIndices[i], r.GetName(colIndices[i]));
        //            }
        //        }
        //        if (prev[0] == null || r.GetInt32(0) != (int)prev[0]) {
        //            if (prev[0] != null) {
        //                Helper.SerializePivotRow(jsonWriter, prev, cols, sums, pivotColumnsDictionary);
        //            }
        //            foreach (var rs in pivotColumnsDictionary) {
        //                sums[rs.Key] = 0;
        //            }
        //            for (int i = 0; i < r.FieldCount; i++) {
        //                prev[i] = r[i];
        //            }
        //        }
        //        if (r.IsDBNull(resultIndices[0])) {
        //            continue;
        //        }
        //        key = r.GetInt32(resultIndices[0]).ToString();
        //        for (int i = 1; i < resultIndices.Length; i++) {
        //            if (!r.IsDBNull(resultIndices[i])) {
        //                key = r.GetInt32(resultIndices[i]).ToString() + "/" + key;
        //            }
        //        }
        //        if (!r.IsDBNull(pivotCol)) {
        //            sums[key] += r.GetInt32(pivotCol);
        //        }
        //    }
        //    Helper.SerializePivotRow(jsonWriter, prev, cols, sums, pivotColumnsDictionary);
        //    jsonWriter.WriteEndArray();
        //    r.Close();

        //    return stringWriter.ToString();
        //}

        #region Http helper functions

        /**
        * Sends a POST request
        * @param client: The client
        * @param url: The URL
        * @param content: The content
        * @return: The response
        */
        public static async Task<Dictionary<string, object>> PostAsync(HttpClient client, string url, FormUrlEncodedContent content) {
            var response = await client.PostAsync(url, content);
            var responseString = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(responseString);
        }

        /**
        * Sends a GET request
        * @param client: The client
        * @param url: The URL
        * @return: The response
        */
        public static async Task<Dictionary<string, object>> GetObjectAsync(HttpClient client, string url) {
            var response = await client.GetAsync(url);
            var responseString = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(responseString);
        }

        /**
        * Sends a GET request and returns a list
        * @param client: The client
        * @param url: The URL
        * @return: The response
        */
        public static async Task<List<Dictionary<string, object>>> GetListAsync(HttpClient client, string url) {
            var response = await client.GetAsync(url);
            var responseString = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(responseString);
        }

        /**
        * Sends a GET request and returns a string
        * @param client: The client
        * @param url: The URL
        * @return: The response
        */
        public static async Task<Stream> GetStreamAsync(HttpClient client, string url) {
            var response = await client.GetAsync(url);
            var responseStream = await response.Content.ReadAsStreamAsync();
            return responseStream;
        }

        /**
        * Sends a generic request and returns a string
        * @param client: The client
        * @param method: The method
        * @param url: The URL
        * @param content: The content
        * @return: The response
        */
        public static async Task<string> RequestAsync(HttpClient client, HttpMethod method, string url, FormUrlEncodedContent content) {
            var req = new HttpRequestMessage(method, url) {
                Content = content,
                Version = HttpVersion.Version10
            };
            var response = await client.SendAsync(req, HttpCompletionOption.ResponseHeadersRead);
            var responseStream = await response.Content.ReadAsStreamAsync();
            var reader = new StreamReader(responseStream);
            string res = await reader.ReadToEndAsync();
            return res;
        }

        #endregion

    }
}
